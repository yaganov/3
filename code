"С клавиатуры вводится два числа K и N. Квадратная матрица А(N,N), состоящая из 4-х равных по размерам подматриц, B,C,D,E заполняется случайным образом целыми числами винтервале [-10,10]. Для тестирования использовать не случайное заполнение, а целенаправленное."
"26.Формируется матрица F следующим образом: если в С количество нулей в нечетных столбцах в области 1 больше, чем произведение чисел по периметру области 4, то поменять в С симметрично области 1 и 3 местами, иначе В и Е поменять местами несимметрично. При этом матрица А не меняется. После чего вычисляется выражение: ((К*A T)*(F+А-F)  . Выводятся по мере формирования А, F и все матричные операции последовательно."

import numpy as np

# Функция для формирования матрицы A
def create_matrix(N):
    A = np.random.randint(-10, 11, (N, N))
    B = A[:N//2, :N//2]
    C = A[:N//2, N//2:]
    D = A[N//2:, :N//2]
    E = A[N//2:, N//2:]
    return A, B, C, D, E

# Функция для формирования матрицы F
def create_matrix_F(A, B, C, D, E, K):
    count_zeros = np.sum(C[:, 1::2] == 0)
    product_perimeter = np.prod(C[0, :] * C[-1, :] * C[:, 0] * C[:, -1])
    F = A.copy()
    if count_zeros > product_perimeter:
        F[:N//2, N//2:] = np.flipud(F[:N//2, :N//2])
    else:
        F[:N//2, :N//2], F[N//2:, N//2:] = F[N//2:, N//2:], F[:N//2, :N//2]
    return F

# Функция для вычисления выражения ((K*A^T)*(F+A-F))
def calculate_expression(A, F, K):
    A_T = A.T
    F_plus_A_minus_F = F + A - F
    result = K * A_T @ F_plus_A_minus_F
    return result

# Ввод чисел K и N
K = int(input("Введите число K: "))
N = int(input("Введите число N: "))

# Формирование матрицы A
A, B, C, D, E = create_matrix(N)
print("Матрица A:")
print(A)

# Формирование матрицы F
F = create_matrix_F(A, B, C, D, E, K)
print("Матрица F:")
print(F)

# Вычисление выражения ((K*A^T)*(F+A-F))
result = calculate_expression(A, F, K)
print("Результат выражения ((K*A^T)*(F+A-F)):")
print(result)
